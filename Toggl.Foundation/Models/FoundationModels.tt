﻿<#@ template language="C#" hostspecific="True" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
using System;
using Toggl.PrimeRadiant.Models;

namespace Toggl.Foundation.Models
{
<#
    var filePath = Path.GetDirectoryName(Host.TemplateFile);
    var solutionDirectory = Path.Combine(filePath, "../../Toggl.Multivac/Models/" );
    var modelsToGenerate = Directory.GetFiles(solutionDirectory, "*.cs");
    var isFirstClass = true;

    foreach(var modelFile in modelsToGenerate)
    {
        var interfaceName = Path.GetFileName(modelFile).Replace(".cs", "");
        if (interfaceName == "IBaseModel") continue;

        var className = interfaceName.Substring(1, interfaceName.Length - 1);

        if (!isFirstClass)
            WriteLine("");

        WriteLine($"    internal class Foundation{className} : IDatabase{className}");
        WriteLine( "    {");
        WriteLine( "        public int Id { get; set; }\n");

        foreach(var line in File.ReadAllLines(modelFile))
        {
            var isProperty = line.Contains("get;");
            if (!isProperty) continue;

            var trimmedLine = line.Trim();
            var propName = trimmedLine.Substring(0, trimmedLine.Length - 1);

            WriteLine($"        public {propName}set; }}\n");
        }

        WriteLine("        public bool IsDirty { get; set; }");
        WriteLine("    }");

        isFirstClass = false;
    }
    #>
}